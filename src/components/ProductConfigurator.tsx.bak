// Render options section
  const renderOptions = () => {
    return product.options.map(option => renderOptionSelector(option));
  };

  // Now let's add the Valance Type and Bottom Bar Style rendering functions
  const getValanceTypeImage = (valanceType: string): string => {
    const valanceImages: Record<string, string> = {
      'Standard': 'https://ext.same-assets.com/2035588304/1098765432.jpeg',
      'Deluxe': 'https://ext.same-assets.com/2035588304/9987654321.jpeg',
      'None': 'https://ext.same-assets.com/2035588304/8876543210.jpeg'
    };

    return valanceImages[valanceType] || valanceImages['Standard'];
  };

  const getBottomBarImage = (barStyle: string): string => {
    const barImages: Record<string, string> = {
      'Standard': 'https://ext.same-assets.com/2035588304/7765432109.jpeg',
      'Contoured': 'https://ext.same-assets.com/2035588304/6654321098.jpeg',
      'Fabric Wrapped': 'https://ext.same-assets.com/2035588304/5543210987.jpeg'
    };

    return barImages[barStyle] || barImages['Standard'];
  };

  const getLightBlockerImage = (blocker: string): string => {
    const blockerImages: Record<string, string> = {
      'None': 'https://ext.same-assets.com/2035588304/4432109876.jpeg',
      'Side Channels': 'https://ext.same-assets.com/2035588304/3321098765.jpeg',
      'Full Blackout Kit': 'https://ext.same-assets.com/2035588304/2210987654.jpeg'
    };

    return blockerImages[blocker] || blockerImages['None'];
  };

  // Render Valance Type options
  const renderValanceTypeOptions = () => {
    const valanceOption = product.options.find(opt => opt.name === 'Valance Type');
    if (!valanceOption) return null;

    return (
      <div className="mb-6">
        <h3 className="text-base font-semibold mb-3">Choose Your Valance</h3>
        <div className="grid grid-cols-3 gap-3 mb-2">
          {valanceOption.values.map(valance => (
            <div
              key={valance}
              className={`
                border rounded-md p-2 cursor-pointer transition-all
                ${selectedOptions['Valance Type'] === valance
                  ? 'border-blue-600 bg-blue-50'
                  : 'border-gray-300 hover:border-gray-400'
                }
              `}
              onClick={() => handleOptionChange('Valance Type', valance)}
            >
              <div className="h-16 flex items-center justify-center mb-1">
                <img
                  src={getValanceTypeImage(valance)}
                  alt={valance}
                  className="h-14 object-contain"
                />
              </div>
              <p className="text-xs font-medium text-center">{valance}</p>
            </div>
          ))}
        </div>
        <div className="text-xs text-gray-600 mt-1">
          {selectedOptions['Valance Type'] === 'Deluxe' && 'Premium finish with decorative details.'}
          {selectedOptions['Valance Type'] === 'Standard' && 'Clean, simple finishing touch.'}
          {selectedOptions['Valance Type'] === 'None' && 'Minimal look without a decorative valance.'}
        </div>
      </div>
    );
  };

  // Render Bottom Bar options
  const renderBottomBarOptions = () => {
    const barOption = product.options.find(opt => opt.name === 'Bottom Bar Style');
    if (!barOption) return null;

    return (
      <div className="mb-6">
        <h3 className="text-base font-semibold mb-3">Choose a Bottom Bar Style</h3>
        <div className="grid grid-cols-3 gap-3 mb-2">
          {barOption.values.map(bar => (
            <div
              key={bar}
              className={`
                border rounded-md p-2 cursor-pointer transition-all
                ${selectedOptions['Bottom Bar Style'] === bar
                  ? 'border-blue-600 bg-blue-50'
                  : 'border-gray-300 hover:border-gray-400'
                }
              `}
              onClick={() => handleOptionChange('Bottom Bar Style', bar)}
            >
              <div className="h-16 flex items-center justify-center mb-1">
                <img
                  src={getBottomBarImage(bar)}
                  alt={bar}
                  className="h-14 object-contain"
                />
              </div>
              <p className="text-xs font-medium text-center">{bar}</p>
            </div>
          ))}
        </div>
        <div className="text-xs text-gray-600 mt-1">
          {selectedOptions['Bottom Bar Style'] === 'Fabric Wrapped' && 'Soft fabric finishing for a cohesive look.'}
          {selectedOptions['Bottom Bar Style'] === 'Contoured' && 'Sleek, curved design for a modern appearance.'}
          {selectedOptions['Bottom Bar Style'] === 'Standard' && 'Classic flat bar design.'}
        </div>
      </div>
    );
  };

  // Render Light Blocker options
  const renderLightBlockerOptions = () => {
    const blockerOption = product.options.find(opt => opt.name === 'Light Blocker');
    if (!blockerOption) return null;

    return (
      <div className="mb-6">
        <h3 className="text-base font-semibold mb-3">Light Blocker</h3>
        <div className="grid grid-cols-3 gap-3 mb-2">
          {blockerOption.values.map(blocker => (
            <div
              key={blocker}
              className={`
                border rounded-md p-2 cursor-pointer transition-all
                ${selectedOptions['Light Blocker'] === blocker
                  ? 'border-blue-600 bg-blue-50'
                  : 'border-gray-300 hover:border-gray-400'
                }
              `}
              onClick={() => handleOptionChange('Light Blocker', blocker)}
            >
              <div className="h-16 flex items-center justify-center mb-1">
                <img
                  src={getLightBlockerImage(blocker)}
                  alt={blocker}
                  className="h-14 object-contain"
                />
              </div>
              <p className="text-xs font-medium text-center">{blocker}</p>
            </div>
          ))}
        </div>
        <div className="text-xs text-gray-600 mt-1">
          {selectedOptions['Light Blocker'] === 'Side Channels' && 'Reduces light leak along the sides.'}
          {selectedOptions['Light Blocker'] === 'Full Blackout Kit' && 'Maximum light blocking for complete darkness.'}
          {selectedOptions['Light Blocker'] === 'None' && 'Standard installation without additional light blocking.'}
        </div>
      </div>
    );
  };

  return (
    <div className="product-configurator">
      <div className="mb-4 p-4 bg-gray-50 rounded-md">
        <h1 className="text-xl font-semibold">{product.title}</h1>
        <p className="text-sm text-gray-500">Configure Your Window Treatment</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left column - Configuration options */}
        <div className="md:col-span-1 bg-white p-4 rounded-md border border-gray-200">
          {/* Room Type options */}
          {renderRoomTypeOptions()}

          {/* Mount Type options */}
          {renderMountTypeOptions()}

          {/* Window dimensions */}
          <div className="mb-6">
            <h3 className="text-base font-semibold mb-3">Window Measurements (Inches)</h3>
            <div className="grid grid-cols-2 gap-4 mb-3">
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">Width</label>
                <div className="flex">
                  <select
                    value={width.whole}
                    onChange={(e) => setWidth({ ...width, whole: parseInt(e.target.value) })}
                    className="flex-1 mr-1 rounded-l-md border border-gray-300 py-1 px-2 text-sm focus:border-blue-600 focus:outline-none focus:ring-blue-600"
                  >
                    {generateSizeOptions(12, 96).map(num => (
                      <option key={`width-${num}`} value={num}>{num}</option>
                    ))}
                  </select>
                  <select
                    value={width.fraction}
                    onChange={(e) => setWidth({ ...width, fraction: e.target.value })}
                    className="w-16 rounded-r-md border border-gray-300 py-1 px-1 text-sm focus:border-blue-600 focus:outline-none focus:ring-blue-600"
                  >
                    {fractions.map(fraction => (
                      <option key={`width-${fraction.value}`} value={fraction.value}>{fraction.label}</option>
                    ))}
                  </select>
                </div>
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-1">Height</label>
                <div className="flex">
                  <select
                    value={height.whole}
                    onChange={(e) => setHeight({ ...height, whole: parseInt(e.target.value) })}
                    className="flex-1 mr-1 rounded-l-md border border-gray-300 py-1 px-2 text-sm focus:border-blue-600 focus:outline-none focus:ring-blue-600"
                  >
                    {generateSizeOptions(12, 96).map(num => (
                      <option key={`height-${num}`} value={num}>{num}</option>
                    ))}
                  </select>
                  <select
                    value={height.fraction}
                    onChange={(e) => setHeight({ ...height, fraction: e.target.value })}
                    className="w-16 rounded-r-md border border-gray-300 py-1 px-1 text-sm focus:border-blue-600 focus:outline-none focus:ring-blue-600"
                  >
                    {fractions.map(fraction => (
                      <option key={`height-${fraction.value}`} value={fraction.value}>{fraction.label}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
            <div className="flex items-center text-xs text-gray-600">
              <svg className="w-3 h-3 text-blue-600 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <span>For {mountType === 'Inside Mount' ? 'inside mount' : 'outside mount'}, measure to the nearest 1/8".</span>
            </div>
          </div>

          {/* Color options */}
          {renderColorSwatches()}

          {/* Control Type options (Lift Control) */}
          {renderControlTypeOptions()}

          {/* Control Side options */}
          {renderControlSideOptions()}

          {/* Valance Type options */}
          {renderValanceTypeOptions()}

          {/* Bottom Bar Style options */}
          {renderBottomBarOptions()}

          {/* Light Blocker options */}
          {renderLightBlockerOptions()}

          {/* Other product options */}
          {renderOptions()}
        </div>

        {/* Middle column - Product preview */}
        <div className="md:col-span-1 bg-white p-4 rounded-md border border-gray-200">
          <div className="sticky top-4">
            <div className="mb-4">
              <div className="aspect-w-1 aspect-h-1 mb-3">
                <img
                  src={product.image}
                  alt={product.title}
                  className="w-full h-full object-cover rounded-md"
                />
              </div>
              {product.additionalImages && product.additionalImages.length > 0 && (
                <div className="grid grid-cols-4 gap-2">
                  {product.additionalImages.slice(0, 4).map((img, idx) => (
                    <div key={idx} className="border border-gray-200 rounded-md overflow-hidden">
                      <img
                        src={img}
                        alt={`${product.title} view ${idx + 1}`}
                        className="w-full h-12 object-cover"
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div className="mb-4">
              <h3 className="text-base font-semibold mb-1">Product Details</h3>
              <p className="text-sm text-gray-600 mb-3">{product.description}</p>
              <ul className="text-xs text-gray-600 space-y-1">
                {product.features.slice(0, 3).map((feature, idx) => (
                  <li key={idx} className="flex items-start">
                    <svg className="w-3 h-3 text-blue-600 mt-0.5 mr-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <button className="w-full py-2 text-xs text-blue-600 font-medium border border-blue-600 rounded">
                View More Information
              </button>
            </div>
          </div>
        </div>

        {/* Right column - Summary and price */}
        <div className="md:col-span-1 bg-white p-4 rounded-md border border-gray-200">
          <div className="sticky top-4">
            <div className="mb-4">
              <div className="flex justify-between items-baseline mb-2">
                <h3 className="text-base font-semibold">Summary</h3>
                <span className="text-sm text-gray-500">ID: {product.id}</span>
              </div>
              <div className="flex justify-between">
                <div className="text-lg font-bold">${calculatedPrice.toFixed(2)}</div>
                <div className="text-xs text-gray-500 text-right">
                  <div>Est. Delivery</div>
                  <div>{getDeliveryEstimate()}</div>
                </div>
              </div>
              <div className="text-xs text-gray-600 mt-1">
                Free shipping & price match guarantee
              </div>
            </div>

            <div className="border-t border-gray-200 py-3 mb-4">
              <h4 className="text-sm font-medium mb-2">Your Selections</h4>
              <div className="space-y-2 text-xs">
                <div className="flex justify-between">
                  <span className="text-gray-600">Size:</span>
                  <span>{formatDimension(width)} W × {formatDimension(height)} H</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Room Type:</span>
                  <span>{selectedOptions['Room Type'] || 'Living Room'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Mount Type:</span>
                  <span>{selectedOptions['Mount Type'] || 'Inside Mount'}</span>
                </div>
                {Object.entries(selectedOptions)
                  .filter(([key]) => key !== 'Mount Type' && key !== 'Room Type')
                  .map(([key, value]) => (
                    <div key={key} className="flex justify-between">
                      <span className="text-gray-600">{key}:</span>
                      <span>{value}</span>
                    </div>
                  ))
                }
              </div>
            </div>

            <div className="mb-4">
              <label htmlFor="quantity" className="block text-xs font-medium text-gray-700 mb-1">
                Quantity
              </label>
              <div className="flex items-center">
                <button
                  type="button"
                  className="bg-gray-100 hover:bg-gray-200 p-1 rounded-l-md border border-gray-300"
                  onClick={() => quantity > 1 && setQuantity(quantity - 1)}
                >
                  <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 12H4" />
                  </svg>
                </button>
                <input
                  id="quantity"
                  type="number"
                  min="1"
                  value={quantity}
                  onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}
                  className="w-12 text-center border-t border-b border-gray-300 py-1"
                />
                <button
                  type="button"
                  className="bg-gray-100 hover:bg-gray-200 p-1 rounded-r-md border border-gray-300"
                  onClick={() => setQuantity(quantity + 1)}
                >
                  <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                </button>
              </div>
            </div>

            {errorMessage && (
              <div className="text-red-500 text-xs mb-3">{errorMessage}</div>
            )}

            <button
              onClick={handleAddToCart}
              className="w-full bg-orange-600 hover:bg-orange-700 text-white py-3 px-4 rounded font-medium transition-colors mb-4"
            >
              Add to Cart
            </button>

            <div className="text-xs space-y-2">
              <div className="flex items-center">
                <svg className="w-3 h-3 text-green-500 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>Free shipping on all orders</span>
              </div>
              <div className="flex items-center">
                <svg className="w-3 h-3 text-green-500 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>100% satisfaction guarantee</span>
              </div>
              <div className="flex items-center">
                <svg className="w-3 h-3 text-green-500 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>SureFit™ measuring guarantee</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductConfigurator;
